{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hkhanhlam99/Desktop/Repo/WeatherApp-API/App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport * as Location from 'expo-location';\nimport { colors } from \"./utils/colors\";\nvar WEATHER_BASE_URL = 'https://api.openweathermap.org/data/2.5/weather?';\nvar PRIMARY_COLOR = colors.PRIMARY_COLOR,\n    SECONDARY_COLOR = colors.SECONDARY_COLOR,\n    BASE_COLOR = colors.BASE_COLOR;\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentWeather = _useState4[0],\n      setCurrentWeather = _useState4[1];\n\n  var _useState5 = useState('metric'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      unitsSystem = _useState6[0],\n      setUnitsSystem = _useState6[1];\n\n  useEffect(function () {\n    load();\n  }, []);\n\n  function load() {\n    var _await$Location$reque, status, location, _location$coords, latitude, longitude, WEATHER_URL, response, result;\n\n    return _regeneratorRuntime.async(function load$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n          case 3:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context.next = 8;\n              break;\n            }\n\n            setErrorMessage('Permission to access location was denied');\n            return _context.abrupt(\"return\");\n\n          case 8:\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n          case 10:\n            location = _context.sent;\n            _location$coords = location.coords, latitude = _location$coords.latitude, longitude = _location$coords.longitude;\n            WEATHER_URL = WEATHER_BASE_URL + \"lat=\" + latitude + \"&lon=\" + longitude + \"&units=\" + unitsSystem + \"&appid=\" + \"9fad3d395e743404766133bf2ae85202\";\n            _context.next = 15;\n            return _regeneratorRuntime.awrap(fetch(WEATHER_URL));\n\n          case 15:\n            response = _context.sent;\n            _context.next = 18;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 18:\n            result = _context.sent;\n\n            if (response.ok) {\n              setCurrentWeather(result);\n            } else {\n              setErrorMessage(result.message);\n            }\n\n            _context.next = 25;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](0);\n            setErrorMessage(_context.t0.message);\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 22]], Promise);\n  }\n\n  if (currentWeather) {\n    var temp = currentWeather.main.temp;\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, temp), React.createElement(StatusBar, {\n      style: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), React.createElement(View, {\n      style: styles.main,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, temp)));\n  } else if (errorMessage) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, errorMessage), React.createElement(StatusBar, {\n      style: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: colors.PRIMARY_COLOR,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }), React.createElement(StatusBar, {\n      style: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  main: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/hkhanhlam99/Desktop/Repo/WeatherApp-API/App.js"],"names":["StatusBar","React","useState","useEffect","Location","colors","WEATHER_BASE_URL","PRIMARY_COLOR","SECONDARY_COLOR","BASE_COLOR","App","errorMessage","setErrorMessage","currentWeather","setCurrentWeather","unitsSystem","setUnitsSystem","load","requestPermissionsAsync","status","getCurrentPositionAsync","location","coords","latitude","longitude","WEATHER_URL","fetch","response","json","result","ok","message","temp","main","styles","container","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {useState, useEffect} from 'react';\nimport { StyleSheet, Text, View, ActivityIndicator } from 'react-native';\nimport * as Location from 'expo-location';\nimport {WEATHER_API_KEY} from '@env';\nimport {colors} from './utils/colors'\n\nconst WEATHER_BASE_URL = 'https://api.openweathermap.org/data/2.5/weather?';\nconst {PRIMARY_COLOR, SECONDARY_COLOR, BASE_COLOR} = colors;\nexport default function App() {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [unitsSystem, setUnitsSystem] = useState('metric');\n\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  async function load () {\n    try {\n      // get request permision\n      let {status} = await Location.requestPermissionsAsync();\n      \n      if(status !== 'granted') {\n        setErrorMessage('Permission to access location was denied');\n        return;\n      }\n      // get current location\n      const location = await Location.getCurrentPositionAsync();\n      // get latitude and longitude of location\n      const {latitude, longitude} = location.coords;\n      // URL path\n      const WEATHER_URL = `${WEATHER_BASE_URL}lat=${latitude}&lon=${longitude}&units=${unitsSystem}&appid=${WEATHER_API_KEY}`;\n      // request API call\n      const response = await fetch(WEATHER_URL);\n      // transform API response to json\n      const result = await response.json();\n\n      if(response.ok) {\n        setCurrentWeather(result);\n      }\n      else {\n        setErrorMessage(result.message);\n      }\n\n      // alert(`latitude:${latitude}, longitude:${longitude}`);\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  }\n\n  if(currentWeather) {\n    const {main: {temp}} = currentWeather;\n    return (\n      <View style={styles.container}>\n            <Text>{temp}</Text>\n\n        <StatusBar style=\"auto\" />\n          <View style={styles.main}>\n            <Text>{temp}</Text>\n          </View>\n      </View>\n    );\n  }\n  else if(errorMessage){\n    return (\n      <View style={styles.container}>\n        <Text>{errorMessage}</Text>\n        <StatusBar style=\"auto\" />\n      </View>\n    );\n  }\n  else {\n    return (\n      <View style={styles.container}>\n        <ActivityIndicator size='large' color={colors.PRIMARY_COLOR}/>\n        <StatusBar style=\"auto\" />\n      </View>\n    ); \n  }\n\n\n  \n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  main: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}